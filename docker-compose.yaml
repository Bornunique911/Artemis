version: "3"

services:
  minio:
    command: "server /data"
    environment:
     - MINIO_ACCESS_KEY=example-access-key
     - MINIO_SECRET_KEY=example-secret-key
    image: minio/minio
    restart: always

  redis:
    image: redis
    restart: always
    volumes:
      - data-redis:/data

  db:
    command: ["--wiredTigerCacheSizeGB", "2"]
    environment:
     - MONGO_INITDB_ROOT_USERNAME=root
     - MONGO_INITDB_ROOT_PASSWORD=root
    image: mongo
    restart: always
    volumes:
     - data-mongodb:/data/db

  autoreporter:
    build:
      context: .
      dockerfile: docker/Dockerfile
    env_file: .env
    volumes:
      # Because the options parsing (which will tell us which previous reports directory the
      # user needs) happens inside the container, we don't know what directory to mount before
      # starting the container. This solution is far from perfect - feel free to propose a better
      # one.
      - /:/host-root/:ro
      - ./output/autoreporter/:/opt/output/autoreporter
      - ./docker/karton.ini:/etc/karton/karton.ini
      - "${DOCKER_COMPOSE_ADDITIONAL_SHARED_DIRECTORY:-./shared}:/shared/"
    profiles: ["autoreporter"]  # This will prevent the service from starting by default

  karton-system:
    command: ["--setup-bucket"]
    depends_on: ["db", "redis", "minio"]
    env_file: .env
    image: "certpl/karton-system:v5.2.0"
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini", "${DOCKER_COMPOSE_ADDITIONAL_SHARED_DIRECTORY:-./shared}:/shared/"]
    restart: always

  karton-logger:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.stdout_logger"
    depends_on: [karton-system]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini", "${DOCKER_COMPOSE_ADDITIONAL_SHARED_DIRECTORY:-./shared}:/shared/"]

  metrics:
    build:
      context: .
      dockerfile: docker/Dockerfile
    depends_on: [karton-logger]
    env_file: .env
    ports: ["9000:9000"]
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini", "${DOCKER_COMPOSE_ADDITIONAL_SHARED_DIRECTORY:-./shared}:/shared/"]
    command: "python3 -m artemis.metrics"

  web:
    build:
      context: .
      dockerfile: docker/Dockerfile
    depends_on: [karton-logger]
    env_file: .env
    environment:
     - DASHBOARD_URL=http://127.0.0.1:5001
    ports: ["5000:5000"]
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini", "${DOCKER_COMPOSE_ADDITIONAL_SHARED_DIRECTORY:-./shared}:/shared/"]

  karton-dashboard:
    depends_on: [karton-logger]
    env_file: .env
    image: certpl/karton-dashboard:v1.5.0
    ports: [5001:5000]
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini", "${DOCKER_COMPOSE_ADDITIONAL_SHARED_DIRECTORY:-./shared}:/shared/"]

  karton-classifier:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.classifier"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini", "${DOCKER_COMPOSE_ADDITIONAL_SHARED_DIRECTORY:-./shared}:/shared/"]

  karton-port_scanner:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.port_scanner"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini", "${DOCKER_COMPOSE_ADDITIONAL_SHARED_DIRECTORY:-./shared}:/shared/"]

  karton-robots:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.robots"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini", "${DOCKER_COMPOSE_ADDITIONAL_SHARED_DIRECTORY:-./shared}:/shared/"]

  karton-vcs:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.vcs"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini", "${DOCKER_COMPOSE_ADDITIONAL_SHARED_DIRECTORY:-./shared}:/shared/"]

  karton-crtsh:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.crtsh"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini", "${DOCKER_COMPOSE_ADDITIONAL_SHARED_DIRECTORY:-./shared}:/shared/"]

  karton-gau:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.gau"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini", "${DOCKER_COMPOSE_ADDITIONAL_SHARED_DIRECTORY:-./shared}:/shared/"]

  karton-ip-lookup:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.ip_lookup"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini", "${DOCKER_COMPOSE_ADDITIONAL_SHARED_DIRECTORY:-./shared}:/shared/"]

  karton-reverse-dns:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.reverse_dns_lookup"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini", "${DOCKER_COMPOSE_ADDITIONAL_SHARED_DIRECTORY:-./shared}:/shared/"]

  karton-bruter:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.bruter"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini", "${DOCKER_COMPOSE_ADDITIONAL_SHARED_DIRECTORY:-./shared}:/shared/"]

  karton-directory_index:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.directory_index"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini", "${DOCKER_COMPOSE_ADDITIONAL_SHARED_DIRECTORY:-./shared}:/shared/"]

  karton-identifier:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.webapp_identifier"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini", "${DOCKER_COMPOSE_ADDITIONAL_SHARED_DIRECTORY:-./shared}:/shared/"]

  karton-joomla_scanner:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.joomla_scanner"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini", "${DOCKER_COMPOSE_ADDITIONAL_SHARED_DIRECTORY:-./shared}:/shared/"]

  karton-wp_scanner:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.wp_scanner"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini", "${DOCKER_COMPOSE_ADDITIONAL_SHARED_DIRECTORY:-./shared}:/shared/"]

  karton-dns_scanner:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.dns_scanner"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini", "${DOCKER_COMPOSE_ADDITIONAL_SHARED_DIRECTORY:-./shared}:/shared/"]

  karton-ftp_bruter:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.ftp_bruter"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini", "${DOCKER_COMPOSE_ADDITIONAL_SHARED_DIRECTORY:-./shared}:/shared/"]

  karton-http_service_to_url:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.http_service_to_url"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini", "${DOCKER_COMPOSE_ADDITIONAL_SHARED_DIRECTORY:-./shared}:/shared/"]

  karton-mysql_bruter:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.mysql_bruter"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini", "${DOCKER_COMPOSE_ADDITIONAL_SHARED_DIRECTORY:-./shared}:/shared/"]

  karton-mail_dns_scanner:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.mail_dns_scanner"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini", "${DOCKER_COMPOSE_ADDITIONAL_SHARED_DIRECTORY:-./shared}:/shared/"]

  karton-nuclei:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.nuclei"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes:
      - "./docker/karton.ini:/etc/karton/karton.ini"
      - "${DOCKER_COMPOSE_ADDITIONAL_SHARED_DIRECTORY:-./shared}:/shared/"
      - data-nuclei-templates:/root/nuclei-templates
      - data-nuclei-config:/root/.config/nuclei

  karton-postman:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.postman"
    depends_on: [karton-logger]
    env_file: .env
    environment:
     - POSTMAN_MAIL_FROM=artemis@example.com
     - POSTMAN_MAIL_TO=artemis@example.com
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini", "${DOCKER_COMPOSE_ADDITIONAL_SHARED_DIRECTORY:-./shared}:/shared/"]

  karton-postgresql_bruter:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.postgresql_bruter"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini", "${DOCKER_COMPOSE_ADDITIONAL_SHARED_DIRECTORY:-./shared}:/shared/"]

  karton-wordpress_bruter:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.wordpress_bruter"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini", "${DOCKER_COMPOSE_ADDITIONAL_SHARED_DIRECTORY:-./shared}:/shared/"]

  karton-shodan_vulns:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.shodan_vulns"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini", "${DOCKER_COMPOSE_ADDITIONAL_SHARED_DIRECTORY:-./shared}:/shared/"]

  karton-ssh_bruter:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.ssh_bruter"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini", "${DOCKER_COMPOSE_ADDITIONAL_SHARED_DIRECTORY:-./shared}:/shared/"]

  karton-domain_expiration_scanner:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.domain_expiration_scanner"
    depends_on: [ karton-logger ]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini", "${DOCKER_COMPOSE_ADDITIONAL_SHARED_DIRECTORY:-./shared}:/shared/"]

  chrome:
    image: selenium/node-chrome
    shm_size: 2gb
    depends_on:
      - selenium-hub
    environment:
      - SE_EVENT_BUS_HOST=selenium-hub
      - SE_EVENT_BUS_PUBLISH_PORT=4442
      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443

  selenium-hub:
    image: selenium/hub
    ports:
      - "4442:4442"
      - "4443:4443"
      - "4444:4444"

## TESTS

#  joomla: # not needed
#    image: joomla:php8.2-apache
#    ports:
#      - 80:80
#    volumes:
##      - ./test/data/joomla_login/configuration.php:/var/www/html/configuration.php
#      - joomla-data:/var/www/html
#    environment:
#      JOOMLA_DB_HOST: joomla-mysql:3306
##      JOOMLA_DB_USER: joomla
#      JOOMLA_DB_PASSWORD: password
#
#  joomla-mysql: # not needed
#    image: mysql:5.7
#    ports:
#      - 3306:3306
#    volumes:
#      - joomla-mysql-data:/var/lib/mysql
#    environment:
#      MYSQL_ROOT_PASSWORD: password
#      MYSQL_USER: joomla
#      MYSQL_PASSWORD: password
#      MYSQL_DATABASE: joomla
#
#  phpmyadmin:
#    image: phpmyadmin/phpmyadmin
#    container_name: phpmyadmin
#    environment:
#      - PMA_ARBITRARY=1
#    restart: always
#    ports:
#      - 8081:80
#
#  django-db:
#    image: postgres
#    volumes:
#      - postgres_data:/var/lib/postgresql/data/
#    environment:
#      - POSTGRES_USER=django_user
#      - POSTGRES_PASSWORD=django_password
#      - POSTGRES_DB=django_db
#
#  django-web:
#    image: python:3.11.4-slim-buster
#    environment:
#      - DJANGO_SUPERUSER_PASSWORD=password
#      - DJANGO_SUPERUSER_USERNAME=djangouser
#      - DJANGO_SUPERUSER_EMAIL=test111111111@exampple.com
#
#    depends_on:
#      - django-db
#    stdin_open: true
#    tty: true
#    command: >
#      sh -c "pip install Django &&
#      python3 usr/src/app/manage.py makemigrations &&
#      python3 usr/src/app/manage.py migrate &&
#      python3 usr/src/app/manage.py runserver 0.0.0.0:8000 &&
#      python3 usr/src/app/manage.py loaddata db.json"
#    volumes:
#      - ./test/data/django/:/usr/src/app/
#      - ./requirements.txt:/urs/src/app/requirements.txt
#    ports:
#      - 8000:8000
#    env_file:
#      - ./test/data/django/.env.django-sample
#
#  drupal:
#    image: drupal:latest
#    depends_on:
#      - drupal-postgres
#    ports:
#      - 88:88
#    volumes:
#      - drupal_modules:/var/www/html/modules
#      - drupal_profiles:/var/www/html/profiles
#      - drupal_themes:/var/www/html/themes
#      - drupal_sites:/var/www/html/sites
#    restart: always
#
#  drupal-postgres:
#    image: postgres
#    environment:
#      POSTGRES_PASSWORD: password
#      POSTGRES_EXTENSIONS: pg_trgm
##    command: >
##      sh -c "psql -U postgres &&
##             pg_restore -U postgres -C -d postgres db-postgres.tar"
#    ports:
#      - 5432:5432
#    volumes:
#      - ./test/data/drupal/db_extensions:/docker-entrypoint-initdb.d
#      - drupal_db_data:/var/lib/postgresql/data
#      - ./test/data/database/db-postgres.tar:/db-postgres.tar
#    restart: always
#
#  singlepage-website:
#    image: nginx:latest
#    volumes:
#      - ./test/data/single_page/:/usr/share/nginx/html/
#    ports:
#      - 8080:80
#
#  symfony-mysql:
#    image: mysql
#    command: --default-authentication-plugin=mysql_native_password
#    environment:
#      MYSQL_ROOT_PASSWORD: secret
#      MYSQL_DATABASE: symfony_docker
#      MYSQL_USER: symfony
#      MYSQL_PASSWORD: symfony
#    ports:
#      - 4306:3306
#    volumes:
#      - ./mysql:/var/lib/mysql
#
#  symfony-nginx:
#    image: nginx:stable-alpine
#    ports:
#      - 8082:80
#    volumes:
#      - ./test/data/symfony:/var/www/symfony_docker
#      - ./test/data/symfony/nginx/default.conf:/etc/nginx/conf.d/default.conf
#    depends_on:
#      - symfony-php
#      - symfony-mysql
#
#  symfony-php:
#    build:
#      context: ./test/data/symfony/docker
#    ports:
#      - 9000:9000
#    volumes:
#      - ./test/data/symfony/app:/var/www/symfony_docker
#      - ./test/data/symfony/config/php.ini:/usr/local/etc/php/php.ini
#    depends_on:
#      - symfony-mysql

volumes:
  data-mongodb:
  data-redis:
  data-nuclei-templates:
  data-nuclei-config:
#  joomla-mysql-data:
#  joomla-data:
#  postgres_data:
#  drupal_modules:
#  drupal_profiles:
#  drupal_themes:
#  drupal_sites:
#  drupal_db_data:
